@inject IProductService ProductService
@implements IDisposable 
@using System.Net.Http
@using System.Text.Json
@using System.Text;

@inject HttpClient Http

@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
    <span>@ProductService.Message</span>
}
else
{
 
<ul class="list-unstyled">
    @foreach (var product in ProductService.Products)
    {
        <li class="media d-flex my-3">
            <div class="media-img-wrapper mr-2">
                <a href="/product/@product.Id">
                    <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
                </a>
            </div>
            <div class="media-body">
                    <a href="/product/@product.Id">
                    <h4 class="mb-0">@product.Title</h4>
                </a>
                <p>@product.Description</p>
                <h5 class="price">
                    @GetPriceText(product)
                </h5>
            </div>
        </li>
    }
</ul>

}
@* <div>
    <h3>Excel to JSON Conversion Result:</h3>
    <p>@resultMessage</p>
</div> *@

@code {
    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
        // try
        // {
        //     var excelResult = await Http.GetFromJsonAsync<JsonElement[]>("api/product/getExcel");
        //     if (excelResult != null)
        //     {
        //         var stringBuilder = new StringBuilder();

        //         foreach (var element in excelResult)
        //         {
        //             stringBuilder.AppendLine(element.ToString());
        //         }

        //         resultMessage = stringBuilder.ToString();
        //     }
        //     else
        //     {
        //         resultMessage = "Excel to JSON conversion result is empty.";
        //     }
        // }
        // catch (HttpRequestException)
        // {
        //     resultMessage = "An error occurred while retrieving Excel to JSON data.";
        // }
    }
    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;

    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if (variants.Count == 0) return string.Empty;
        else if (variants.Count == 1) return $"{variants[0].Price}";
        return $"Starting at ${variants.Min(x => x.Price)}";
    }
}